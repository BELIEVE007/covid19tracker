{"version":3,"sources":["components/Cards/Cards.module.css","components/Cards/CardComponent.jsx","components/Cards/Cards.jsx","api/index.js","components/Chart/Chart.jsx","components/CountryPicker/CountryPicker.jsx","App.js","index.js","App.module.css","components/Chart/Chart.module.css","components/CountryPicker/CountryPicker.module.css"],"names":["module","exports","CardComponent","caseType","lastUpdate","name","desc","classNames","Grid","item","component","Card","xs","md","className","CardContent","Typography","color","variant","gutterBottom","start","end","value","separator","duration","Date","toDateString","Cards","data","confirmed","recovered","deaths","styles","container","justify","spacing","cx","card","Infected","Recovered","Deaths","url","fetchData","country","a","changeableUrl","axios","get","modifiedData","console","log","fetchDailyData","map","dailyData","total","date","reportDate","fetchCountries","countries","Chart","useState","setDailyData","useEffect","fetchAPI","lineChart","length","labels","datasets","label","borderColor","fill","backgroundColor","barChart","options","legend","display","title","text","CountryPicker","handleCountryChange","setCountries","FormControl","formControl","NativeSelect","defaultValue","onChange","event","target","i","key","App","state","fetchedData","setState","this","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.aeea3611.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__3YDly\",\"card\":\"Cards_card__1Bbxi\",\"Infected\":\"Cards_Infected__3PDa8\",\"Recovered\":\"Cards_Recovered__1UpMA\",\"Deaths\":\"Cards_Deaths__pijhE\"};","import React from \"react\";\r\n\r\n// importing some Components from Material-UI\r\nimport { Card, Typography, CardContent, Grid } from \"@material-ui/core\";\r\n// CountUp component to include the counting animation\r\nimport CountUp from \"react-countup\";\r\n\r\nconst CardComponent = ({ caseType, lastUpdate, name, desc, classNames }) => {\r\n  return (\r\n    <>\r\n      <Grid item component={Card} xs={12} md={3} className={classNames}>\r\n        <CardContent>\r\n          <Typography color=\"textSecondary\" variant=\"body1\">\r\n            {name}\r\n          </Typography>\r\n          <Typography variant=\"h5\" gutterBottom>\r\n            <CountUp\r\n              start={0}\r\n              end={caseType.value}\r\n              separator=\",\"\r\n              duration={2.5}\r\n            />\r\n          </Typography>\r\n          <Typography color=\"textSecondary\" variant=\"subtitle2\">\r\n            {new Date(lastUpdate).toDateString()}\r\n          </Typography>\r\n          <Typography variant=\"subtitle2\">{desc}</Typography>\r\n        </CardContent>\r\n      </Grid>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default CardComponent;\r\n","import React from \"react\";\r\n\r\n// importing some Components from Material-UI\r\nimport { Grid } from \"@material-ui/core\";\r\nimport cx from \"classnames\";\r\n\r\nimport CardComponent from \"./CardComponent\";\r\nimport styles from \"./Cards.module.css\";\r\n\r\nconst Cards = ({ data: { confirmed, recovered, deaths, lastUpdate } }) => {\r\n  // To check weather the data is loaded or not if not then \"Loading...\" is displayed\r\n  if (!confirmed) {\r\n    return \"Loading...\";\r\n  }\r\n  return (\r\n    <div className={styles.container}>\r\n      <Grid container justify=\"center\" spacing={3}>\r\n        <CardComponent\r\n          classNames={cx(styles.card, styles.Infected)}\r\n          name={\"Infected\"}\r\n          caseType={confirmed}\r\n          lastUpdate={lastUpdate}\r\n          desc={\"Number of active cases of COVID-19\"}\r\n        />\r\n        <CardComponent\r\n          classNames={cx(styles.card, styles.Recovered)}\r\n          name={\"Recovered\"}\r\n          caseType={recovered}\r\n          lastUpdate={lastUpdate}\r\n          desc={\"Number of recoveries from COVID-19\"}\r\n        />\r\n        <CardComponent\r\n          classNames={cx(styles.card, styles.Deaths)}\r\n          name={\"Deaths\"}\r\n          caseType={deaths}\r\n          lastUpdate={lastUpdate}\r\n          desc={\"Number of deaths caused by COVID-19\"}\r\n        />\r\n      </Grid>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Cards;\r\n","import axios from \"axios\";\r\n\r\nconst url = \"https://covid19.mathdro.id/api\";\r\n\r\nexport const fetchData = async (country) => {\r\n  let changeableUrl = url;\r\n\r\n  if (country) {\r\n    changeableUrl = `${url}/countries/${country}`;\r\n  }\r\n\r\n  try {\r\n    //   fetching the data from the url, destructuring the data to get only the data we want\r\n    //  and exporting it to App.js\r\n    const {\r\n      data: { confirmed, recovered, deaths, lastUpdate },\r\n    } = await axios.get(changeableUrl);\r\n\r\n    // storing the fetched data in an Object and returning\r\n    const modifiedData = {\r\n      confirmed: confirmed,\r\n      recovered: recovered,\r\n      deaths: deaths,\r\n      lastUpdate: lastUpdate,\r\n    };\r\n    return modifiedData;\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n\r\nexport const fetchDailyData = async () => {\r\n  try {\r\n    const { data } = await axios.get(`${url}/daily`);\r\n\r\n    const modifiedData = data.map((dailyData) => ({\r\n      confirmed: dailyData.confirmed.total,\r\n      deaths: dailyData.deaths.total,\r\n      date: dailyData.reportDate,\r\n    }));\r\n\r\n    return modifiedData;\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n\r\nexport const fetchCountries = async () => {\r\n  try {\r\n    const {\r\n      data: { countries },\r\n    } = await axios.get(`${url}/countries`);\r\n    return countries.map((country) => country.name);\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Line, Bar } from \"react-chartjs-2\";\r\n\r\nimport { fetchDailyData } from \"../../api\";\r\nimport styles from \"./Chart.module.css\";\r\n\r\nconst Chart = ({ data: { confirmed, recovered, deaths }, country }) => {\r\n  const [dailyData, setDailyData] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const fetchAPI = async () => {\r\n      setDailyData(await fetchDailyData());\r\n    };\r\n\r\n    fetchAPI();\r\n  }, []);\r\n\r\n  const lineChart = dailyData.length ? (\r\n    <Line\r\n      data={{\r\n        labels: dailyData.map(({ date }) => date),\r\n        datasets: [\r\n          {\r\n            data: dailyData.map(({ confirmed }) => confirmed),\r\n            label: \"Infected\",\r\n            borderColor: \"rgba(0, 0, 255, 0.5)\",\r\n            fill: true,\r\n          },\r\n          {\r\n            data: dailyData.map(({ deaths }) => deaths),\r\n            label: \"Deaths\",\r\n            borderColor: \"rgba(255, 0, 0, 0.5)\",\r\n            backgroundColor: \"rgba(255, 0, 0, 0.2)\",\r\n            fill: true,\r\n          },\r\n        ],\r\n      }}\r\n    />\r\n  ) : null;\r\n\r\n  const barChart = confirmed ? (\r\n    <Bar\r\n      data={{\r\n        labels: [\"Infected\", \"Recovered\", \"Deaths\"],\r\n        datasets: [\r\n          {\r\n            label: \"People\",\r\n            backgroundColor: [\r\n              \"rgba(0, 0, 255, 0.5)\",\r\n              \"rgba(0, 255, 0, 0.5)\",\r\n              \"rgba(255, 0, 0, 0.5)\",\r\n            ],\r\n            data: [confirmed.value, recovered.value, deaths.value],\r\n          },\r\n        ],\r\n      }}\r\n      options={{\r\n        legend: { display: false },\r\n        title: { display: true, text: `Current state in ${country}` },\r\n      }}\r\n    />\r\n  ) : null;\r\n\r\n  return (\r\n    <div className={styles.container}>{country ? barChart : lineChart}</div>\r\n  );\r\n};\r\n\r\nexport default Chart;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { FormControl, NativeSelect } from \"@material-ui/core\";\r\n\r\nimport { fetchCountries } from \"../../api\";\r\nimport styles from \"./CountryPicker.module.css\";\r\n\r\nconst CountryPicker = ({ handleCountryChange }) => {\r\n  const [countries, setCountries] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const fetchAPI = async () => {\r\n      setCountries(await fetchCountries());\r\n    };\r\n    fetchAPI();\r\n  }, [setCountries]);\r\n\r\n  return (\r\n    <FormControl className={styles.formControl}>\r\n      <NativeSelect\r\n        defaultValue=\"\"\r\n        onChange={(event) => handleCountryChange(event.target.value)}\r\n      >\r\n        <option value=\"\">Global</option>\r\n        {countries.map((country, i) => (\r\n          <option key={i} value={country}>\r\n            {country}\r\n          </option>\r\n        ))}\r\n      </NativeSelect>\r\n    </FormControl>\r\n  );\r\n};\r\n\r\nexport default CountryPicker;\r\n","import React from \"react\";\r\n\r\nimport { Cards, Chart, CountryPicker } from \"./components\";\r\nimport styles from \"./App.module.css\";\r\nimport { fetchData } from \"./api\";\r\n\r\nclass App extends React.Component {\r\n  // Declaring the state of the App\r\n  state = {\r\n    data: {},\r\n    country: \"\",\r\n  };\r\n  async componentDidMount() {\r\n    const fetchedData = await fetchData();\r\n    this.setState({ data: fetchedData });\r\n  }\r\n  handleCountryChange = async (country) => {\r\n    const fetchedData = await fetchData(country);\r\n    this.setState({ data: fetchedData, country: country });\r\n  };\r\n  render() {\r\n    // Destructuring the data from the state\r\n    const { data, country } = this.state;\r\n    return (\r\n      <div className={styles.container}>\r\n        <h1 className={styles.title}>COVID-19</h1>\r\n        <Cards data={data} />\r\n        <CountryPicker handleCountryChange={this.handleCountryChange} />\r\n        <Chart data={data} country={country} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__rEz8E\",\"title\":\"App_title__3KC7T\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__18Wpx\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"CountryPicker_formControl__3CiZi\"};"],"sourceRoot":""}